#!/usr/bin/env python3

import socket
import argparse
import ipaddress
import threading
import time
import csv
from queue import Queue
from concurrent.futures import ThreadPoolExecutor

VERSION = "0.5"

BLUE = "\033[94m"
GREEN = "\033[92m"
RED = "\033[91m"
ORANGE = "\033[33m"
ENDC = "\033[0m"

progress_lock = threading.Lock()
progress_counter = 0
total_hosts = 0

def display_banner():
    banner = rf"""
{ORANGE} 
                                                           
              ###          ###                                                                 
           #####              #####                                                           
         ######                ######                                                         
      .######                    ######                                                       
   *  #:...#                      #...-#  +                                                   
 ###  #***##                      ##**##  ###                                                 
##=#  #####                       =#####  #+##                                                
###+#  #####=                      =#####  #*###                                               
####=#  ###.#                      #.### :*+#*##                                               
 #**##.@@ #..+                     #=..# @@.##*##                                               
  ##+*#.@@@..=##                  ##=..@@%.#*###                                               
  ##=+-@@-####                      ####=@:*####                                                
  ###.%:.:###                      ###=+###*#  .%#                                             
##%@  ####*:.#  +                # ##*#=.-*-  @##-                                             
####@@  ######  #-    ###%*.##   #-......  @@###                                              
 ####@@@+.*. +# ###   ####@###   ## ####*.@@@@#                                            
 *####@@=+@@=##= @@@#  #%%@@  @@ @#+*@@.#@@##                                              
  .####@-@@@+##@@  %### ###@   @##**@@@%@####                                                
      :#@#=*+-#+@@@ .#####%@@..@@  #####  @@@*+                                                 
     #+      .@@@@@- ##@@@@@@@#*#.@@@%## @@@@                                               
       ##########.:=*###@@@%#++%%..##%%@@@..                                                  
         .######@%..::......##@@@.###..:+##                                              
           -###@@@@..##=.####@%+.::..####                                                      
              @@@@@@  #%########%#*-#####+                                                            
                  @@@@    #@@-:-#@@%##                                                                
                       @@***.@@@@                                                                          
                     .@@@..@%..@@@                                                                         
                    -@*.:##:@##..%@                                                                        
                   .@#%%###:=%##%%#@                                                                       
                  .#@#.@@%####@@@ @%#                                                                      
                   #@ @## .....*#@ @#                                                                      
                     ##.+  ## *..##                                                                        
                    #@:.+  ## ::.*@+                                                                       
                    %%@@@  ##  @@@%%                                                                       
                     *###  ##  ###:                                                                        
                       ##  %#  ##                                                                          
                        #  %=  #                                                                           
                           #:                                                                              
                           =-                                                                              

     #@@@@@      @@@   =@@      @@@@     @@@@@@@    @@     @@    -@@    @@@    @@@                         
     :@@%@@@@    @@@    @@    @@@@@@@@   @@@@@@@    @@@@   @@     @@      @@  @@@                          
     .@@   @@    @@%    @@   @@.    -@@  @@         @@@@@  @@     @@       @@@@:                           
     .@@@@@@@    @@@@@@@@@   @@      @@  @@@@@@@    @@  @@@@@     @@        @@@                            
     .@@         @@.    @@   @@@    @@@  @@         @@*  @@@@     @@       %@@ @@                           
     @@@         @@@   @@@     @@@@@@    @@@@@@@#   @@@   @@@    %@@      @@@   @@@                         


       ######    #######    #######    ##    #-    #######       ##   ########=     #*    ##                          
      #.         #          ##     +    :#    #     ##    ##    +#      #          #-  ##                           
      .####.     ######     +#         :#    #     ##    ##    +#     *#          #=##                            
           *#=   #          #         .#    #     ######      +#     *#          ##                             
      #     ##   #          *#=       ##-  ##    ##     ##   ##    ##           ##                                     
       .####     #######    ######    ####     ##    =#    +#     +#          #*                             
                               

        CVE-2024-6387 Vulnerability Checker origal version 
        v{VERSION} / Alex Hagenah / @xaitax / ah@primepage.de

        Special thanks to ask@phoenix.security for modification
        {ENDC}
"""
    print(banner)




def get_ssh_sock(ip, port, timeout):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(timeout)
    try:
        sock.connect((ip, port))
        return sock
    except:
        sock.close()
        return None


def get_ssh_banner(sock):
    try:
        banner = sock.recv(1024).decode(errors='ignore').strip()
        sock.close()
        return banner
    except Exception as e:
        return str(e)


def check_vulnerability(ip, port, timeout, result_queue):
    global progress_counter

    sshsock = get_ssh_sock(ip, port, timeout)
    if not sshsock:
        result_queue.put((ip, port, 'closed', "Port closed"))
        with progress_lock:
            progress_counter += 1
        return

    banner = get_ssh_banner(sshsock)
    if "SSH-2.0" not in banner:
        result_queue.put(
            (ip, port, 'failed', f"Failed to retrieve SSH banner: {banner}"))
        with progress_lock:
            progress_counter += 1
        return

    if "SSH-2.0-OpenSSH" not in banner:
        result_queue.put((ip, port, 'unknown', f"(banner: {banner})"))
        with progress_lock:
            progress_counter += 1
        return

    vulnerable_versions = [
        'SSH-2.0-OpenSSH_1',
        'SSH-2.0-OpenSSH_2',
        'SSH-2.0-OpenSSH_3',
        'SSH-2.0-OpenSSH_4.0',
        'SSH-2.0-OpenSSH_4.1',
        'SSH-2.0-OpenSSH_4.2',
        'SSH-2.0-OpenSSH_4.3',
        'SSH-2.0-OpenSSH_4.4',
        'SSH-2.0-OpenSSH_8.5',
        'SSH-2.0-OpenSSH_8.6',
        'SSH-2.0-OpenSSH_8.7',
        'SSH-2.0-OpenSSH_8.8',
        'SSH-2.0-OpenSSH_8.9',
        'SSH-2.0-OpenSSH_9.0',
        'SSH-2.0-OpenSSH_9.1',
        'SSH-2.0-OpenSSH_9.2',
        'SSH-2.0-OpenSSH_9.3',
        'SSH-2.0-OpenSSH_9.4',
        'SSH-2.0-OpenSSH_9.5',
        'SSH-2.0-OpenSSH_9.6',
        'SSH-2.0-OpenSSH_9.7'
    ]

    excluded_versions = [
        'SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.10',
        'SSH-2.0-OpenSSH_9.3p1 Ubuntu-3ubuntu3.6',
        'SSH-2.0-OpenSSH_9.6p1 Ubuntu-3ubuntu13.3',
        'SSH-2.0-OpenSSH_9.3p1 Ubuntu-1ubuntu3.6',
        'SSH-2.0-OpenSSH_9.2p1 Debian-2+deb12u3',
        'SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u3'
    ]

    if any(version in banner for version in vulnerable_versions) and banner not in excluded_versions:
        result_queue.put((ip, port, 'vulnerable', f"(running {banner})"))
    else:
        result_queue.put((ip, port, 'not_vulnerable', f"(running {banner})"))

    with progress_lock:
        progress_counter += 1


def process_ip_list(ip_list_file):
    ips = []
    try:
        with open(ip_list_file, 'r') as file:
            ips.extend(file.readlines())
    except IOError:
        print(f"‚ùå [-] Could not read file: {ip_list_file}")
    return [ip.strip() for ip in ips]


def main():
    global total_hosts
    display_banner()

    parser = argparse.ArgumentParser(
        description="Check if servers are running a vulnerable version of OpenSSH (CVE-2024-6387).")
    parser.add_argument(
        "targets", nargs='*', help="IP addresses, domain names, file paths containing IP addresses, or CIDR network ranges.")
    parser.add_argument("--port", type=int, default=22,
                        help="Port number to check (default: 22).")
    parser.add_argument("-t", "--timeout", type=float, default=1.0,
                        help="Connection timeout in seconds (default: 1 second).")
    parser.add_argument(
        "-l", "--list", help="File containing a list of IP addresses to check.")

    args = parser.parse_args()
    targets = args.targets
    port = args.port
    timeout = args.timeout

    ips = []

    if args.list:
        ips.extend(process_ip_list(args.list))

    for target in targets:
        try:
            with open(target, 'r') as file:
                ips.extend(file.readlines())
        except IOError:
            if '/' in target:
                try:
                    network = ipaddress.ip_network(target, strict=False)
                    ips.extend([str(ip) for ip in network.hosts()])
                except ValueError:
                    print(f"‚ùå [-] Invalid CIDR notation: {target}")
            else:
                ips.append(target)

    result_queue = Queue()

    total_hosts = len(ips)

    max_workers = 100

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = [executor.submit(check_vulnerability, ip.strip(
        ), port, timeout, result_queue) for ip in ips]

        while any(future.running() for future in futures):
            with progress_lock:
                print(f"\rProgress: {progress_counter}/{total_hosts} hosts scanned", end="")
            time.sleep(1)

    for future in futures:
        future.result()

    print(f"\rProgress: {progress_counter}/{total_hosts} hosts scanned")

    total_scanned = len(ips)
    closed_ports = 0
    unknown = []
    not_vulnerable = []
    vulnerable = []

    while not result_queue.empty():
        ip, port, status, message = result_queue.get()
        if status == 'closed':
            closed_ports += 1
        elif status == 'unknown':
            unknown.append((ip, message))
        elif status == 'vulnerable':
            vulnerable.append((ip, message))
        elif status == 'not_vulnerable':
            not_vulnerable.append((ip, message))
        else:
            print(f"‚ö†Ô∏è [!] Server at {ip}:{port} is {message}")

    # Define CSV headers
    headers = [
        "a_id", "at_ip", "at_network", "at_hostname", "at_netbios",
        "at_os", "at_mac", "at_fqdn", "v_name", "v_description",
        "v_remedy", "v_severity", "v_cve", "v_cwe", "v_published_datetime",
        "v_details"
    ]

    # Write vulnerable hosts to CSV
    with open('import_common_assets_vulnerabilities_openssh_vulnerable.csv', 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(headers)
        for ip, msg in vulnerable:
            writer.writerow([
                "", ip, "", "", "", "", "", "", 
                "CVE-2024-6387 regreSSHion",
                "A signal handler race condition was found in OpenSSH's server (sshd), where a client does not authenticate within LoginGraceTime seconds (120 by default, 600 in old OpenSSH versions), then sshd's SIGALRM handler is called asynchronously. However, this signal handler calls various functions that are not async-signal-safe, for example, syslog().",
                "update to version> 9.1p1 vulnerable version 8.5p1 <= OpenSSH < 9.8p1 4.4p1 <= OpenSSH < 8.5p1 is not vulnerable, OpenSSH < 4.4p1 is vulnerable",
                "8.1", "CVE-2024-6387", "CWE-364", "", ""
            ])

    # Write non-vulnerable hosts to CSV
    with open('import_common_assets_vulnerabilities_openssh_nonvulnerable.csv', 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(headers)
        for ip, msg in not_vulnerable:
            writer.writerow([
                "", ip, "", "", "", "", "", "", 
                "CVE-2024-6387 regreSSHion", "Non Vulnerable",
                "Host not vulnerable", "8.1", "CVE-2024-6387", "CWE-364", "", ""
            ])

    print(f"\nüõ°Ô∏è Servers not vulnerable: {len(not_vulnerable)}\n")
    for ip, msg in not_vulnerable:
        print(f"   [+] Server at {GREEN}{ip}{ENDC} {msg}")
    print(f"\nüö® Servers likely vulnerable: {len(vulnerable)}\n")
    for ip, msg in vulnerable:
        print(f"   [+] Server at {RED}{ip}{ENDC} {msg}")
    print(f"\n‚ö†Ô∏è Servers with unknown SSH version: {len(unknown)}\n")
    for ip, msg in unknown:
        print(f"   [+] Server at {ORANGE}{ip}{ENDC} {msg}")
    print(f"\nüîí Servers with port {port} closed: {closed_ports}")
    print(f"\nüìä Total scanned targets: {total_scanned}\n")


if __name__ == "__main__":
    main()
